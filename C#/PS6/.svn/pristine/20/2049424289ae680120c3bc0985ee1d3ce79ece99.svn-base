// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUItest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS 3500\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISpreadsheetWindowExePath, this.RecordedMethod1Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(94, 37));

            // Type '1' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod1Params.UIContentBoxEditText;
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uINameBoxEdit = this.UISpreadsheetWindow.UINameBoxWindow.UINameBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'NameBox' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UINameBoxEditText, uINameBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals '1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(143, 59));

            // Type '1' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod2Params.UIContentBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(149, 83));

            // Type '2' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod2Params.UIContentBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(149, 107));

            // Type '3' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod2Params.UIContentBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(148, 124));

            // Type '4' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod2Params.UIContentBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(148, 138));

            // Type '5' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod2Params.UIContentBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(160, 162));

            // Type '=B2+B3+B4+B5+B6' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod2Params.UIContentBoxEditText5;
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uINameBoxEdit = this.UISpreadsheetWindow.UINameBoxWindow.UINameBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'NameBox' text box's property 'Text' equals 'B7'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UINameBoxEditText, uINameBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '=B2+B3+B4+B5+B6'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals '15'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uIFilenameEdit = this.UISaveaSpreadsheetFileWindow.UIItemWindow.UIFilenameEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(35, 9));

            // Type 't' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod3Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(229, 58));

            // Type '1' in 'ContentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.RecordedMethod3Params.UIContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(231, 84));

            // Type '2' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(231, 101));

            // Type '3' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(224, 133));

            // Type '5' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(223, 118));

            // Type '4' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(224, 163));

            // Type '=C2+C3+C4+C5+C6' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(219, 60));

            // Type '71' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText5;
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uINameBoxEdit = this.UISpreadsheetWindow.UINameBoxWindow.UINameBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow.UIContentBoxWindow.UIContentBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'NameBox' text box's property 'Text' equals 'C2'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UINameBoxEditText, uINameBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '71'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals '71'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uIAboutMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMenuItem;
            WinButton uIOKButton = this.UIAboutWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIHowToMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIHowToMenuItem;
            WinButton uIOKButton1 = this.UIHowToWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow1.UIContentBoxWindow.UIContentBoxEdit;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uICancelButton1 = this.UICloseWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(42, 13));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(46, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(50, 13));

            // Click 'Help' -> 'How To' menu item
            Mouse.Click(uIHowToMenuItem, new Point(75, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(19, 11));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(38, 9));

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(45, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 161));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(47, 8));

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(51, 13));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(28, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(313, 100));

            // Type '5' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod4Params.UIContentBoxEditText;

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(69, 9));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(12, 9));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uINameBoxEdit = this.UISpreadsheetWindow1.UINameBoxWindow.UINameBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetWindow1.UIContentBoxWindow.UIContentBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow1.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that 'NameBox' text box's property 'Text' equals 'D4'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UINameBoxEditText, uINameBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '5'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals '5'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UICloseWindow.UINOWindow.UINOButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveaSpreadsheetFileWindow.UIDetailsPanePane.UIFilenameComboBox;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(27, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(26, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(54, 13));

            // Last mouse action was not recorded.

            // Select 'C:\Users\Bryan\Desktop\test2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod5Params.UIFilenameComboBoxEditableItem;

            // Last mouse action was not recorded.
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinListItem uITest2ssListItem = this.UIProgramManagerWindow.UIDesktopList.UITest2ssListItem;
            #endregion

            // Verify that 'test2.ss' list item's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UITest2ssListItemExists, uITest2ssListItem.Exists);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISaveaSpreadsheetFileWindow UISaveaSpreadsheetFileWindow
        {
            get
            {
                if ((this.mUISaveaSpreadsheetFileWindow == null))
                {
                    this.mUISaveaSpreadsheetFileWindow = new UISaveaSpreadsheetFileWindow();
                }
                return this.mUISaveaSpreadsheetFileWindow;
            }
        }
        
        public UIAboutWindow UIAboutWindow
        {
            get
            {
                if ((this.mUIAboutWindow == null))
                {
                    this.mUIAboutWindow = new UIAboutWindow();
                }
                return this.mUIAboutWindow;
            }
        }
        
        public UIHowToWindow UIHowToWindow
        {
            get
            {
                if ((this.mUIHowToWindow == null))
                {
                    this.mUIHowToWindow = new UIHowToWindow();
                }
                return this.mUIHowToWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow();
                }
                return this.mUICloseWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISaveaSpreadsheetFileWindow mUISaveaSpreadsheetFileWindow;
        
        private UIAboutWindow mUIAboutWindow;
        
        private UIHowToWindow mUIHowToWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UICloseWindow mUICloseWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS 3500\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Bryan\\Documents\\CS 3500\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS 3500\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Documents\\CS 3500\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NameBox' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UINameBoxEditText = "A1";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '1'
        /// </summary>
        public string UIContentBoxEditText = "1";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals '1'
        /// </summary>
        public string UIValueBoxEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "1";
        
        /// <summary>
        /// Type '2' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText1 = "2";
        
        /// <summary>
        /// Type '3' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText2 = "3";
        
        /// <summary>
        /// Type '4' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText3 = "4";
        
        /// <summary>
        /// Type '5' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText4 = "5";
        
        /// <summary>
        /// Type '=B2+B3+B4+B5+B6' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText5 = "=B2+B3+B4+B5+B6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NameBox' text box's property 'Text' equals 'B7'
        /// </summary>
        public string UINameBoxEditText = "B7";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '=B2+B3+B4+B5+B6'
        /// </summary>
        public string UIContentBoxEditText = "=B2+B3+B4+B5+B6";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals '15'
        /// </summary>
        public string UIValueBoxEditText = "15";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 't' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "t";
        
        /// <summary>
        /// Type '1' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "1";
        
        /// <summary>
        /// Type '2' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "2";
        
        /// <summary>
        /// Type '3' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText1 = "3";
        
        /// <summary>
        /// Type '5' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText2 = "5";
        
        /// <summary>
        /// Type '4' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText3 = "4";
        
        /// <summary>
        /// Type '=C2+C3+C4+C5+C6' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText4 = "=C2+C3+C4+C5+C6";
        
        /// <summary>
        /// Type '71' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText5 = "71";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NameBox' text box's property 'Text' equals 'C2'
        /// </summary>
        public string UINameBoxEditText = "C2";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '71'
        /// </summary>
        public string UIContentBoxEditText = "71";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals '71'
        /// </summary>
        public string UIValueBoxEditText = "71";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NameBox' text box's property 'Text' equals 'D4'
        /// </summary>
        public string UINameBoxEditText = "D4";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '5'
        /// </summary>
        public string UIContentBoxEditText = "5";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals '5'
        /// </summary>
        public string UIValueBoxEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'C:\Users\Bryan\Desktop\test2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "C:\\Users\\Bryan\\Desktop\\test2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'test2.ss' list item's property 'Exists' equals 'True'
        /// </summary>
        public bool UITest2ssListItemExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIContentBoxWindow UIContentBoxWindow
        {
            get
            {
                if ((this.mUIContentBoxWindow == null))
                {
                    this.mUIContentBoxWindow = new UIContentBoxWindow(this);
                }
                return this.mUIContentBoxWindow;
            }
        }
        
        public UINameBoxWindow UINameBoxWindow
        {
            get
            {
                if ((this.mUINameBoxWindow == null))
                {
                    this.mUINameBoxWindow = new UINameBoxWindow(this);
                }
                return this.mUINameBoxWindow;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIContentBoxWindow mUIContentBoxWindow;
        
        private UINameBoxWindow mUINameBoxWindow;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContentBoxWindow : WinWindow
    {
        
        public UIContentBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentBoxEdit
        {
            get
            {
                if ((this.mUIContentBoxEdit == null))
                {
                    this.mUIContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINameBoxWindow : WinWindow
    {
        
        public UINameBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "NameBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameBoxEdit
        {
            get
            {
                if ((this.mUINameBoxEdit == null))
                {
                    this.mUINameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "FX:";
                    this.mUINameBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "=";
                    this.mUIValueBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        
        public WinMenuItem UIHowToMenuItem
        {
            get
            {
                if ((this.mUIHowToMenuItem == null))
                {
                    this.mUIHowToMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHowToMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "How To";
                    this.mUIHowToMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHowToMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIHowToMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutMenuItem;
        
        private WinMenuItem mUIHowToMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveaSpreadsheetFileWindow : WinWindow
    {
        
        public UISaveaSpreadsheetFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save a Spreadsheet File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save a Spreadsheet File");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save a Spreadsheet File");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save a Spreadsheet File");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save a Spreadsheet File");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save a Spreadsheet File");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAboutWindow : WinWindow
    {
        
        public UIAboutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHowToWindow : WinWindow
    {
        
        public UIHowToWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "How To";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("How To");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("How To");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("How To");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIContentBoxWindow1 UIContentBoxWindow
        {
            get
            {
                if ((this.mUIContentBoxWindow == null))
                {
                    this.mUIContentBoxWindow = new UIContentBoxWindow1(this);
                }
                return this.mUIContentBoxWindow;
            }
        }
        
        public UINameBoxWindow1 UINameBoxWindow
        {
            get
            {
                if ((this.mUINameBoxWindow == null))
                {
                    this.mUINameBoxWindow = new UINameBoxWindow1(this);
                }
                return this.mUINameBoxWindow;
            }
        }
        
        public UIValueBoxWindow1 UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow1(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UISpreadsheetTitleBar1 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar1(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIContentBoxWindow1 mUIContentBoxWindow;
        
        private UINameBoxWindow1 mUINameBoxWindow;
        
        private UIValueBoxWindow1 mUIValueBoxWindow;
        
        private UISpreadsheetTitleBar1 mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContentBoxWindow1 : WinWindow
    {
        
        public UIContentBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentBoxEdit
        {
            get
            {
                if ((this.mUIContentBoxEdit == null))
                {
                    this.mUIContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINameBoxWindow1 : WinWindow
    {
        
        public UINameBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "NameBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameBoxEdit
        {
            get
            {
                if ((this.mUINameBoxEdit == null))
                {
                    this.mUINameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "FX:";
                    this.mUINameBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValueBoxWindow1 : WinWindow
    {
        
        public UIValueBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "=";
                    this.mUIValueBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow1 mUICancelWindow;
        
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Close");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Close");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UITest2ssListItem
        {
            get
            {
                if ((this.mUITest2ssListItem == null))
                {
                    this.mUITest2ssListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUITest2ssListItem.SearchProperties[WinListItem.PropertyNames.Name] = "test2.ss";
                    this.mUITest2ssListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUITest2ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUITest2ssListItem;
        #endregion
    }
}
